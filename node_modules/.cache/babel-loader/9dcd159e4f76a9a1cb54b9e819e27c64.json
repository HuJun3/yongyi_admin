{"remainingRequest":"/Users/hujun/Downloads/永益科技后端/node_modules/babel-loader/lib/index.js!/Users/hujun/Downloads/永益科技后端/src/store/module/user.js","dependencies":[{"path":"/Users/hujun/Downloads/永益科技后端/src/store/module/user.js","mtime":1610587844000},{"path":"/Users/hujun/Downloads/永益科技后端/.babelrc","mtime":1610587842000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgiOwppbXBvcnQgLy8gZ2V0TWVzc2FnZSwKLy8gZ2V0Q29udGVudEJ5TXNnSWQsCi8vIGhhc1JlYWQsCi8vIHJlbW92ZVJlYWRlZCwKLy8gcmVzdG9yZVRyYXNoLAovLyBnZXRVbnJlYWRDb3VudAonQC9hcGkvdXNlcic7CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogewogICAgdXNlck5hbWU6ICcnLAogICAgdXNlcklkOiAnJywKICAgIGF2YXRhckltZ1BhdGg6ICcnLAogICAgYWNjZXNzOiAnJywKICAgIGhhc0dldEluZm86IGZhbHNlLAogICAgdW5yZWFkQ291bnQ6IDAsCiAgICBtZXNzYWdlVW5yZWFkTGlzdDogW10sCiAgICBtZXNzYWdlUmVhZGVkTGlzdDogW10sCiAgICBtZXNzYWdlVHJhc2hMaXN0OiBbXSwKICAgIG1lc3NhZ2VDb250ZW50U3RvcmU6IHt9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHNldEF2YXRhcjogZnVuY3Rpb24gc2V0QXZhdGFyKHN0YXRlLCBhdmF0YXJQYXRoKSB7CiAgICAgIHN0YXRlLmF2YXRhckltZ1BhdGggPSBhdmF0YXJQYXRoOwogICAgfSwKICAgIHNldFVzZXJJZDogZnVuY3Rpb24gc2V0VXNlcklkKHN0YXRlLCBpZCkgewogICAgICBzdGF0ZS51c2VySWQgPSBpZDsKICAgIH0sCiAgICBzZXRVc2VyTmFtZTogZnVuY3Rpb24gc2V0VXNlck5hbWUoc3RhdGUsIG5hbWUpIHsKICAgICAgc3RhdGUudXNlck5hbWUgPSBuYW1lOwogICAgfSwKICAgIHNldEFjY2VzczogZnVuY3Rpb24gc2V0QWNjZXNzKHN0YXRlLCBhY2Nlc3MpIHsKICAgICAgc3RhdGUuYWNjZXNzID0gYWNjZXNzOwogICAgfSwKICAgIHNldEhhc0dldEluZm86IGZ1bmN0aW9uIHNldEhhc0dldEluZm8oc3RhdGUsIHN0YXR1cykgewogICAgICBzdGF0ZS5oYXNHZXRJbmZvID0gc3RhdHVzOwogICAgfSwKICAgIHNldE1lc3NhZ2VDb3VudDogZnVuY3Rpb24gc2V0TWVzc2FnZUNvdW50KHN0YXRlLCBjb3VudCkgewogICAgICBzdGF0ZS51bnJlYWRDb3VudCA9IGNvdW50OwogICAgfSwKICAgIHNldE1lc3NhZ2VVbnJlYWRMaXN0OiBmdW5jdGlvbiBzZXRNZXNzYWdlVW5yZWFkTGlzdChzdGF0ZSwgbGlzdCkgewogICAgICBzdGF0ZS5tZXNzYWdlVW5yZWFkTGlzdCA9IGxpc3Q7CiAgICB9LAogICAgc2V0TWVzc2FnZVJlYWRlZExpc3Q6IGZ1bmN0aW9uIHNldE1lc3NhZ2VSZWFkZWRMaXN0KHN0YXRlLCBsaXN0KSB7CiAgICAgIHN0YXRlLm1lc3NhZ2VSZWFkZWRMaXN0ID0gbGlzdDsKICAgIH0sCiAgICBzZXRNZXNzYWdlVHJhc2hMaXN0OiBmdW5jdGlvbiBzZXRNZXNzYWdlVHJhc2hMaXN0KHN0YXRlLCBsaXN0KSB7CiAgICAgIHN0YXRlLm1lc3NhZ2VUcmFzaExpc3QgPSBsaXN0OwogICAgfSwKICAgIHVwZGF0ZU1lc3NhZ2VDb250ZW50U3RvcmU6IGZ1bmN0aW9uIHVwZGF0ZU1lc3NhZ2VDb250ZW50U3RvcmUoc3RhdGUsIF9yZWYpIHsKICAgICAgdmFyIG1zZ19pZCA9IF9yZWYubXNnX2lkLAogICAgICAgICAgY29udGVudCA9IF9yZWYuY29udGVudDsKICAgICAgc3RhdGUubWVzc2FnZUNvbnRlbnRTdG9yZVttc2dfaWRdID0gY29udGVudDsKICAgIH0sCiAgICBtb3ZlTXNnOiBmdW5jdGlvbiBtb3ZlTXNnKHN0YXRlLCBfcmVmMikgewogICAgICB2YXIgZnJvbSA9IF9yZWYyLmZyb20sCiAgICAgICAgICB0byA9IF9yZWYyLnRvLAogICAgICAgICAgbXNnX2lkID0gX3JlZjIubXNnX2lkOwogICAgICB2YXIgaW5kZXggPSBzdGF0ZVtmcm9tXS5maW5kSW5kZXgoZnVuY3Rpb24gKF8pIHsKICAgICAgICByZXR1cm4gXy5tc2dfaWQgPT09IG1zZ19pZDsKICAgICAgfSk7CiAgICAgIHZhciBtc2dJdGVtID0gc3RhdGVbZnJvbV0uc3BsaWNlKGluZGV4LCAxKVswXTsKICAgICAgbXNnSXRlbS5sb2FkaW5nID0gZmFsc2U7CiAgICAgIHN0YXRlW3RvXS51bnNoaWZ0KG1zZ0l0ZW0pOwogICAgfQogIH0sCiAgZ2V0dGVyczogewogICAgbWVzc2FnZVVucmVhZENvdW50OiBmdW5jdGlvbiBtZXNzYWdlVW5yZWFkQ291bnQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm1lc3NhZ2VVbnJlYWRMaXN0Lmxlbmd0aDsKICAgIH0sCiAgICBtZXNzYWdlUmVhZGVkQ291bnQ6IGZ1bmN0aW9uIG1lc3NhZ2VSZWFkZWRDb3VudChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubWVzc2FnZVJlYWRlZExpc3QubGVuZ3RoOwogICAgfSwKICAgIG1lc3NhZ2VUcmFzaENvdW50OiBmdW5jdGlvbiBtZXNzYWdlVHJhc2hDb3VudChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubWVzc2FnZVRyYXNoTGlzdC5sZW5ndGg7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICAvLyDmraTmlrnms5XnlKjmnaXojrflj5bmnKror7vmtojmga/mnaHmlbDvvIzmjqXlj6Plj6rov5Tlm57mlbDlgLzvvIzkuI3ov5Tlm57mtojmga/liJfooagKICAgIGdldFVucmVhZE1lc3NhZ2VDb3VudDogZnVuY3Rpb24gZ2V0VW5yZWFkTWVzc2FnZUNvdW50KF9yZWYzKSB7Ly8gZ2V0VW5yZWFkQ291bnQoKS50aGVuKHJlcyA9PiB7CiAgICAgIC8vICAgY29uc3QgeyBkYXRhIH0gPSByZXMKICAgICAgLy8gICBjb21taXQoJ3NldE1lc3NhZ2VDb3VudCcsIGRhdGEpCiAgICAgIC8vIH0pCgogICAgICB2YXIgc3RhdGUgPSBfcmVmMy5zdGF0ZSwKICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgIH0gLy8g6I635Y+W5raI5oGv5YiX6KGo77yM5YW25Lit5YyF5ZCr5pyq6K+744CB5bey6K+744CB5Zue5pS256uZ5LiJ5Liq5YiX6KGoCiAgICAvLyBnZXRNZXNzYWdlTGlzdCAoeyBzdGF0ZSwgY29tbWl0IH0pIHsKICAgIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIC8vICAgICBnZXRNZXNzYWdlKCkudGhlbihyZXMgPT4gewogICAgLy8gICAgICAgY29uc3QgeyB1bnJlYWQsIHJlYWRlZCwgdHJhc2ggfSA9IHJlcy5kYXRhCiAgICAvLyAgICAgICBjb21taXQoJ3NldE1lc3NhZ2VVbnJlYWRMaXN0JywgdW5yZWFkLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIuY3JlYXRlX3RpbWUpIC0gbmV3IERhdGUoYS5jcmVhdGVfdGltZSkpKQogICAgLy8gICAgICAgY29tbWl0KCdzZXRNZXNzYWdlUmVhZGVkTGlzdCcsIHJlYWRlZC5tYXAoXyA9PiB7CiAgICAvLyAgICAgICAgIF8ubG9hZGluZyA9IGZhbHNlCiAgICAvLyAgICAgICAgIHJldHVybiBfCiAgICAvLyAgICAgICB9KS5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLmNyZWF0ZV90aW1lKSAtIG5ldyBEYXRlKGEuY3JlYXRlX3RpbWUpKSkKICAgIC8vICAgICAgIGNvbW1pdCgnc2V0TWVzc2FnZVRyYXNoTGlzdCcsIHRyYXNoLm1hcChfID0+IHsKICAgIC8vICAgICAgICAgXy5sb2FkaW5nID0gZmFsc2UKICAgIC8vICAgICAgICAgcmV0dXJuIF8KICAgIC8vICAgICAgIH0pLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGIuY3JlYXRlX3RpbWUpIC0gbmV3IERhdGUoYS5jcmVhdGVfdGltZSkpKQogICAgLy8gICAgICAgcmVzb2x2ZSgpCiAgICAvLyAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgLy8gICAgICAgcmVqZWN0KGVycm9yKQogICAgLy8gICAgIH0pCiAgICAvLyAgIH0pCiAgICAvLyB9LAogICAgLy8g5qC55o2u5b2T5YmN54K55Ye755qE5raI5oGv55qEaWTojrflj5blhoXlrrkKICAgIC8vIGdldENvbnRlbnRCeU1zZ0lkICh7IHN0YXRlLCBjb21taXQgfSwgeyBtc2dfaWQgfSkgewogICAgLy8gICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgLy8gICAgIGxldCBjb250ZW50SXRlbSA9IHN0YXRlLm1lc3NhZ2VDb250ZW50U3RvcmVbbXNnX2lkXQogICAgLy8gICAgIGlmIChjb250ZW50SXRlbSkgewogICAgLy8gICAgICAgcmVzb2x2ZShjb250ZW50SXRlbSkKICAgIC8vICAgICB9IGVsc2UgewogICAgLy8gICAgICAgZ2V0Q29udGVudEJ5TXNnSWQobXNnX2lkKS50aGVuKHJlcyA9PiB7CiAgICAvLyAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSByZXMuZGF0YQogICAgLy8gICAgICAgICBjb21taXQoJ3VwZGF0ZU1lc3NhZ2VDb250ZW50U3RvcmUnLCB7IG1zZ19pZCwgY29udGVudCB9KQogICAgLy8gICAgICAgICByZXNvbHZlKGNvbnRlbnQpCiAgICAvLyAgICAgICB9KQogICAgLy8gICAgIH0KICAgIC8vICAgfSkKICAgIC8vIH0KICAgIC8vIOaKiuS4gOS4quacquivu+a2iOaBr+agh+iusOS4uuW3suivuwogICAgLy8gaGFzUmVhZCAoeyBzdGF0ZSwgY29tbWl0IH0sIHsgbXNnX2lkIH0pIHsKICAgIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIC8vICAgICBoYXNSZWFkKG1zZ19pZCkudGhlbigoKSA9PiB7CiAgICAvLyAgICAgICBjb21taXQoJ21vdmVNc2cnLCB7CiAgICAvLyAgICAgICAgIGZyb206ICdtZXNzYWdlVW5yZWFkTGlzdCcsCiAgICAvLyAgICAgICAgIHRvOiAnbWVzc2FnZVJlYWRlZExpc3QnLAogICAgLy8gICAgICAgICBtc2dfaWQKICAgIC8vICAgICAgIH0pCiAgICAvLyAgICAgICBjb21taXQoJ3NldE1lc3NhZ2VDb3VudCcsIHN0YXRlLnVucmVhZENvdW50IC0gMSkKICAgIC8vICAgICAgIHJlc29sdmUoKQogICAgLy8gICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgIC8vICAgICAgIHJlamVjdChlcnJvcikKICAgIC8vICAgICB9KQogICAgLy8gICB9KQogICAgLy8gfQogICAgLy8g5Yig6Zmk5LiA5Liq5bey6K+75raI5oGv5Yiw5Zue5pS256uZCiAgICAvLyByZW1vdmVSZWFkZWQgKHsgY29tbWl0IH0sIHsgbXNnX2lkIH0pIHsKICAgIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIC8vICAgICByZW1vdmVSZWFkZWQobXNnX2lkKS50aGVuKCgpID0+IHsKICAgIC8vICAgICAgIGNvbW1pdCgnbW92ZU1zZycsIHsKICAgIC8vICAgICAgICAgZnJvbTogJ21lc3NhZ2VSZWFkZWRMaXN0JywKICAgIC8vICAgICAgICAgdG86ICdtZXNzYWdlVHJhc2hMaXN0JywKICAgIC8vICAgICAgICAgbXNnX2lkCiAgICAvLyAgICAgICB9KQogICAgLy8gICAgICAgcmVzb2x2ZSgpCiAgICAvLyAgICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgLy8gICAgICAgcmVqZWN0KGVycm9yKQogICAgLy8gICAgIH0pCiAgICAvLyAgIH0pCiAgICAvLyB9CiAgICAvLyDov5jljp/kuIDkuKrlt7LliKDpmaTmtojmga/liLDlt7Lor7vmtojmga8KICAgIC8vIHJlc3RvcmVUcmFzaCAoeyBjb21taXQgfSwgeyBtc2dfaWQgfSkgewogICAgLy8gICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgLy8gICAgIHJlc3RvcmVUcmFzaChtc2dfaWQpLnRoZW4oKCkgPT4gewogICAgLy8gICAgICAgY29tbWl0KCdtb3ZlTXNnJywgewogICAgLy8gICAgICAgICBmcm9tOiAnbWVzc2FnZVRyYXNoTGlzdCcsCiAgICAvLyAgICAgICAgIHRvOiAnbWVzc2FnZVJlYWRlZExpc3QnLAogICAgLy8gICAgICAgICBtc2dfaWQKICAgIC8vICAgICAgIH0pCiAgICAvLyAgICAgICByZXNvbHZlKCkKICAgIC8vICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAvLyAgICAgICByZWplY3QoZXJyb3IpCiAgICAvLyAgICAgfSkKICAgIC8vICAgfSkKICAgIC8vIH0KCiAgfQp9Ow=="},{"version":3,"sources":["/Users/hujun/Downloads/永益科技后端/src/store/module/user.js"],"names":["state","userName","userId","avatarImgPath","access","hasGetInfo","unreadCount","messageUnreadList","messageReadedList","messageTrashList","messageContentStore","mutations","setAvatar","avatarPath","setUserId","id","setUserName","name","setAccess","setHasGetInfo","status","setMessageCount","count","setMessageUnreadList","list","setMessageReadedList","setMessageTrashList","updateMessageContentStore","msg_id","content","moveMsg","from","to","index","findIndex","_","msgItem","splice","loading","unshift","getters","messageUnreadCount","length","messageReadedCount","messageTrashCount","actions","getUnreadMessageCount","commit"],"mappings":"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","sourcesContent":["import {\n    // getMessage,\n    // getContentByMsgId,\n    // hasRead,\n    // removeReaded,\n    // restoreTrash,\n    // getUnreadCount\n} from '@/api/user'\n\nexport default {\n    state: {\n        userName: '',\n        userId: '',\n        avatarImgPath: '',\n        access: '',\n        hasGetInfo: false,\n        unreadCount: 0,\n        messageUnreadList: [],\n        messageReadedList: [],\n        messageTrashList: [],\n        messageContentStore: {}\n    },\n    mutations: {\n        setAvatar (state, avatarPath) {\n            state.avatarImgPath = avatarPath\n        },\n        setUserId (state, id) {\n            state.userId = id\n        },\n        setUserName (state, name) {\n            state.userName = name\n        },\n        setAccess (state, access) {\n            state.access = access\n        },\n        setHasGetInfo (state, status) {\n            state.hasGetInfo = status\n        },\n        setMessageCount (state, count) {\n            state.unreadCount = count\n        },\n        setMessageUnreadList (state, list) {\n            state.messageUnreadList = list\n        },\n        setMessageReadedList (state, list) {\n            state.messageReadedList = list\n        },\n        setMessageTrashList (state, list) {\n            state.messageTrashList = list\n        },\n        updateMessageContentStore (state, { msg_id, content }) {\n            state.messageContentStore[msg_id] = content\n        },\n        moveMsg (state, { from, to, msg_id }) {\n            const index = state[from].findIndex(_ => _.msg_id === msg_id)\n            const msgItem = state[from].splice(index, 1)[0]\n            msgItem.loading = false\n            state[to].unshift(msgItem)\n        }\n    },\n    getters: {\n        messageUnreadCount: state => state.messageUnreadList.length,\n        messageReadedCount: state => state.messageReadedList.length,\n        messageTrashCount: state => state.messageTrashList.length\n    },\n    actions: {\n        // 此方法用来获取未读消息条数，接口只返回数值，不返回消息列表\n        getUnreadMessageCount ({ state, commit }) {\n            // getUnreadCount().then(res => {\n            //   const { data } = res\n            //   commit('setMessageCount', data)\n            // })\n        }\n    // 获取消息列表，其中包含未读、已读、回收站三个列表\n    // getMessageList ({ state, commit }) {\n    //   return new Promise((resolve, reject) => {\n    //     getMessage().then(res => {\n    //       const { unread, readed, trash } = res.data\n    //       commit('setMessageUnreadList', unread.sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n    //       commit('setMessageReadedList', readed.map(_ => {\n    //         _.loading = false\n    //         return _\n    //       }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n    //       commit('setMessageTrashList', trash.map(_ => {\n    //         _.loading = false\n    //         return _\n    //       }).sort((a, b) => new Date(b.create_time) - new Date(a.create_time)))\n    //       resolve()\n    //     }).catch(error => {\n    //       reject(error)\n    //     })\n    //   })\n    // },\n    // 根据当前点击的消息的id获取内容\n    // getContentByMsgId ({ state, commit }, { msg_id }) {\n    //   return new Promise((resolve, reject) => {\n    //     let contentItem = state.messageContentStore[msg_id]\n    //     if (contentItem) {\n    //       resolve(contentItem)\n    //     } else {\n    //       getContentByMsgId(msg_id).then(res => {\n    //         const content = res.data\n    //         commit('updateMessageContentStore', { msg_id, content })\n    //         resolve(content)\n    //       })\n    //     }\n    //   })\n    // }\n    // 把一个未读消息标记为已读\n    // hasRead ({ state, commit }, { msg_id }) {\n    //   return new Promise((resolve, reject) => {\n    //     hasRead(msg_id).then(() => {\n    //       commit('moveMsg', {\n    //         from: 'messageUnreadList',\n    //         to: 'messageReadedList',\n    //         msg_id\n    //       })\n    //       commit('setMessageCount', state.unreadCount - 1)\n    //       resolve()\n    //     }).catch(error => {\n    //       reject(error)\n    //     })\n    //   })\n    // }\n    // 删除一个已读消息到回收站\n    // removeReaded ({ commit }, { msg_id }) {\n    //   return new Promise((resolve, reject) => {\n    //     removeReaded(msg_id).then(() => {\n    //       commit('moveMsg', {\n    //         from: 'messageReadedList',\n    //         to: 'messageTrashList',\n    //         msg_id\n    //       })\n    //       resolve()\n    //     }).catch(error => {\n    //       reject(error)\n    //     })\n    //   })\n    // }\n    // 还原一个已删除消息到已读消息\n    // restoreTrash ({ commit }, { msg_id }) {\n    //   return new Promise((resolve, reject) => {\n    //     restoreTrash(msg_id).then(() => {\n    //       commit('moveMsg', {\n    //         from: 'messageTrashList',\n    //         to: 'messageReadedList',\n    //         msg_id\n    //       })\n    //       resolve()\n    //     }).catch(error => {\n    //       reject(error)\n    //     })\n    //   })\n    // }\n    }\n}\n"]}]}
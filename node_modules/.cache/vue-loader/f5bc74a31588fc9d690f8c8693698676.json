{"remainingRequest":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hujun/Downloads/永益科技后端/src/pages/setting/setSystem/index.vue?vue&type=style&index=0&id=31e0bd3e&scoped=true&lang=stylus&","dependencies":[{"path":"/Users/hujun/Downloads/永益科技后端/src/pages/setting/setSystem/index.vue","mtime":1610587844000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAuaXZ1LXRhYnN7CiAgICBtYXJnaW4tYm90dG9tOiAxOHB4OwogIH0KLmZyb21Cb3h7CiAgICBtaW4taGVpZ2h0IDYwMHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/pages/setting/setSystem","sourcesContent":["<template>\n    <div class=\"article-manager\">\n        <div class=\"i-layout-page-header\">\n          <div class=\"i-layout-page-header\">\n            <span class=\"ivu-page-header-title\">{{title}}</span>\n            <div>\n              <Tabs v-model=\"currentTab\" @on-click=\"changeTab\">\n                <TabPane :icon=\"item.icon\" :label=\"item.label\" :name=\"item.value.toString()\" v-for=\"(item,index) in headerList\" :key=\"index\"/>\n              </Tabs>\n            </div>\n          </div>\n        </div>\n        <Card :bordered=\"false\" dis-hover class=\"ivu-mt fromBox\">\n            <Tabs type=\"card\" v-model=\"childrenId\" v-if=\"headerChildrenList.length\" @on-click=\"changeChildrenTab\">\n                <TabPane :label=\"item.label\" :name=\"item.id.toString()\" v-for=\"(item,index) in headerChildrenList\" :key=\"index\"></TabPane>\n            </Tabs>\n            <form-create :option=\"option\"  :rule=\"rules\" @on-submit=\"onSubmit\" v-if=\"rules.length!==0\"></form-create>\n            <Spin size=\"large\" fix v-if=\"spinShow\"></Spin>\n        </Card>\n    </div>\n</template>\n\n<script>\n    import formCreate from '@form-create/iview'\n    import { headerListApi, dataFromApi } from '@/api/setting'\n    import request from '@/libs/request'\n    export default {\n        name: 'setting_setSystem',\n        components: { formCreate: formCreate.$form() },\n        data () {\n            return {\n                rules: [],\n                option: {\n                    form: {\n                        labelWidth: 185\n                    },\n                  submitBtn:{\n                      col:{\n                        span:3,\n                        push:3\n                      }\n                  },\n                    global: {\n                        upload: {\n                            props: {\n                                onSuccess (res, file) {\n                                    if (res.status === 200) {\n                                        file.url = res.data.src\n                                    } else {\n                                        this.$Message.error(res.msg)\n                                    }\n                                }\n                            }\n                        },\n                      frame:{\n                        props:{\n                          closeBtn:false,\n                          okBtn:false\n                        }\n                      }\n                    }\n                },\n                spinShow: false,\n                FromData: null,\n                currentTab: '',\n                headerList: [],\n                headerChildrenList: [],\n                childrenId: '',\n                title: ''\n            }\n        },\n        created () {\n            this.getAllData()\n        },\n        watch: {\n            $route (to, from) {\n                this.headerChildrenList = []\n                this.getAllData()\n            },\n            childrenId () {\n                this.getFrom()\n            }\n        },\n        methods: {\n            childrenList () {\n                let that = this\n                that.headerList.forEach(function (item) {\n                    if (item.value.toString() === that.currentTab) {\n                      if(item.children === undefined){\n                        that.childrenId = item.id;\n                        that.headerChildrenList=[];\n                      } else {\n                        that.headerChildrenList = item.children\n                        that.childrenId = item.children.length ? item.children[0].id.toString() : ''\n                      }\n                    }\n                })\n            },\n            // 头部tab\n            getHeader () {\n                this.spinShow = true\n                return new Promise((resolve, reject) => {\n                    let tab_id = this.$route.params.tab_id;\n                    let data = {\n                        type: this.$route.params.type ? this.$route.params.type : 0,\n                        pid: tab_id ? tab_id : 0\n                    }\n                    headerListApi(data).then(async res => {\n                        let config = res.data.config_tab\n                        this.headerList = config\n                        this.currentTab = config[0].value.toString()\n                        this.childrenList()\n                        resolve(this.currentTab)\n                        this.spinShow = false\n                    }).catch(err => {\n                        this.spinShow = false\n                        this.$Message.error(err)\n                    })\n                })\n            },\n            // 表单\n            getFrom () {\n                this.spinShow = true\n                return new Promise((resolve, reject) => {\n                    let ids = ''\n                    if (this.$route.params.type === '3') {\n                        ids = this.$route.params.tab_id\n                    } else {\n                        if (this.childrenId) {\n                            ids = this.childrenId\n                        } else {\n                            ids = this.currentTab\n                        }\n                    }\n                    let data = {\n                        tab_id: Number(ids)\n                    }\n                    let logistics = 'freight/config/edit_basics',agent = 'agent/config/edit_basics',\n                        integral = 'marketing/integral_config/edit_basics',sms = 'serve/sms_config/edit_basics',\n                        config = 'setting/config/edit_basics';\n                    let url = this.$route.name === 'setting_logistics'?logistics:this.$route.name === 'setting_distributionSet'?\n                        agent:this.$route.name === 'setting_message'?sms:this.$route.name === 'setting_setSystem'?config:integral;\n                    dataFromApi(data,url).then(async res => {\n                        this.spinShow = false\n                        if (res.data.status === false) {\n                            return this.$authLapse(res.data)\n                        }\n                        this.FromData = res.data\n                        this.rules = res.data.rules\n                        this.title = res.data.title\n                    }).catch(res => {\n                        this.spinShow = false\n                        this.$Message.error(res.msg)\n                    })\n                })\n            },\n            async getAllData () {\n                if (this.$route.params.type !== '3') {\n                    await this.getHeader()\n                } else {\n                    this.headerList = []\n                    this.getFrom()\n                }\n            },\n            // 选择\n            changeTab () {\n                this.childrenList()\n            },\n            // 二级选择\n            changeChildrenTab (name) {\n                this.childrenId = name\n            },\n            // 提交表单 group\n            onSubmit (formData) {\n                request({\n                    url: this.FromData.action,\n                    method: this.FromData.method,\n                    data: formData\n                }).then(res => {\n                    this.$Message.success(res.msg)\n                }).catch(res => {\n                    this.$Message.error(res.msg)\n                })\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"stylus\">\n  .ivu-tabs{\n    margin-bottom: 18px;\n  }\n.fromBox{\n    min-height 600px;\n}\n</style>\n"]}]}
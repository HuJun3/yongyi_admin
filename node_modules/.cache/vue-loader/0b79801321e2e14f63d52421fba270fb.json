{"remainingRequest":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hujun/Downloads/永益科技后端/src/components/main/main.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/hujun/Downloads/永益科技后端/src/components/main/main.vue","mtime":1610587844000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/less-loader/dist/cjs.js","mtime":1625101332743},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hujun/Downloads/永益科技后端/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tYWluIC5oZWFkZXItY29uewogIHBhZGRpbmc6IDAgMjBweCAwIDBweDsKfQoubWFpbiAubG9nby1jb24gaW1newogIGhlaWdodDogNTBweDsKfQoubWFpbiAudGFnLW5hdi13cmFwcGVyewogIGJhY2tncm91bmQ6dW5zZXQ7Cn0KLm9wZW4taW1hZ2V7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIHBvc2l0aW9uOiBmaXhlZDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNik7CiAgaGVpZ2h0OiAxMDAlOwogIHdpZHRoOiAxMDAlOwogIHRvcDogMDsKICBsZWZ0OiAwOwogIHotaW5kZXg6IDEwMDA7Cn0K"},{"version":3,"sources":["main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.vue","sourceRoot":"src/components/main","sourcesContent":["<template>\n  <Layout style=\"height: 100%\" class=\"main\">\n    <Sider hide-trigger collapsible :width=\"200\" :collapsed-width=\"isMobile?0:80\" v-model=\"collapsed\" class=\"left-sider\" :style=\"{overflow: 'hidden'}\">\n      <side-menu accordion ref=\"sideMenu\" :active-name=\"$route.path\" :collapsed=\"collapsed\" @on-select=\"turnToPage\" :menu-list=\"menuList\">\n        <!-- 需要放在菜单上面的内容，如Logo，写在side-menu标签内部，如下 -->\n        <div class=\"logo-con\">\n          <img v-show=\"!collapsed\" :src=\"maxLogo\" key=\"max-logo\" />\n          <img v-show=\"collapsed\" :src=\"minLogo\" key=\"min-logo\" />\n        </div>\n      </side-menu>\n    </Sider>\n    <Layout>\n      <Header class=\"header-con\">\n        <header-bar :collapsed=\"collapsed\" @on-coll-change=\"handleCollapsedChange\" @on-reload=\"handleReload\">\n          <user :message-unread-count=\"unreadCount\" :user-avatar=\"userAvatar\"/>\n          <language v-if=\"$config.useI18n\" @on-lang-change=\"setLocal\" style=\"margin-right: 10px;\" :lang=\"local\"/>\n          <header-notice></header-notice>\n          <fullscreen v-model=\"isFullscreen\" style=\"margin-right: 10px;\"/>\n          <error-store v-if=\"$config.plugin['error-store'] && $config.plugin['error-store'].showInHeader\" :has-read=\"hasReadErrorPage\" :count=\"errorCount\"></error-store>\n          <header-search></header-search>\n        </header-bar>\n      </Header>\n      <Content class=\"main-content-con\">\n        <Layout class=\"main-layout-con\">\n          <div class=\"tag-nav-wrapper\">\n            <tags-nav :value=\"$route\" @input=\"handleClick\" :list=\"tagNavList\" @on-close=\"handleCloseTag\"/>\n          </div>\n          <Content class=\"content-wrapper\">\n<!--            <keep-alive :include=\"cacheList\">-->\n<!--              <router-view v-if=\"reload\"/>-->\n<!--            </keep-alive>-->\n            <router-view v-if=\"reload\" style=\"min-height: 600px;\"/>\n            <!--<ABackTop :height=\"100\" :bottom=\"80\" :right=\"50\" container=\".content-wrapper\"></ABackTop>-->\n            <i-copyright />\n          </Content>\n        </Layout>\n      </Content>\n    </Layout>\n<!--    <div class=\"open-image\" @click=\"clear\" v-if=\"openImage\"><img src=\"@/assets/images/wechat_demo.png\" alt=\"\"></div>-->\n  </Layout>\n</template>\n<script>\n    import iCopyright from '@/components/copyright'\n    import SideMenu from './components/side-menu'\n    import HeaderBar from './components/header-bar'\n    import TagsNav from './components/tags-nav'\n    import User from './components/user'\n    import ABackTop from './components/a-back-top'\n    import Fullscreen from './components/fullscreen'\n    import Language from './components/language'\n    import ErrorStore from './components/error-store'\n    import HeaderSearch from './components/header-search'\n    import HeaderNotice from './components/header-notice'\n\n    import Setting from '@/setting'\n    import iView from 'iview'\n    import { mapMutations, mapActions, mapGetters, mapState } from 'vuex'\n    import { getNewTagList, routeEqual, getMenuopen, getCookies, setCookies } from '@/libs/util'\n    import { getLogo } from '@/api/common';\n    import routers from '@/router/routers'\n    import minLogo from '@/assets/images/logo-small.png'\n    import maxLogo from '@/assets/images/logo.png'\n    import './main.less'\n    export default {\n        name: 'Main',\n        components: {\n            SideMenu,\n            HeaderBar,\n            Language,\n            TagsNav,\n            Fullscreen,\n            ErrorStore,\n            User,\n            ABackTop,\n            iCopyright,\n            HeaderSearch,\n            HeaderNotice\n        },\n        data () {\n            return {\n                collapsed: JSON.parse(getCookies('collapsed')|| 'false'),\n                minLogo,\n                maxLogo,\n                isFullscreen: false,\n                reload: true,\n                screenWidth: '',\n                openImage: true\n            }\n        },\n        computed: {\n            ...mapGetters([\n                'errorCount'\n            ]),\n            ...mapState('media', [\n                'isMobile'\n            ]),\n            tagNavList () {\n                return this.$store.state.app.tagNavList\n            },\n            tagRouter () {\n                return this.$store.state.app.tagRouter\n            },\n            userAvatar () {\n                return this.$store.state.user.avatarImgPath\n            },\n            cacheList () {\n                const list = ['ParentView', ...this.tagNavList.length ? this.tagNavList.filter(item => !(item.meta && item.meta.notCache)).map(item => item.name) : []]\n\n                return list\n            },\n            menuList () {\n                let menus = this.$store.state.menus.menusName\n                let newArray = []\n                menus.forEach((now, index) => {\n                    newArray[index] = now\n                    if (newArray[index].children && now.children) {\n                        newArray[index].children = now.children.filter((item) => {\n                            return !item.auth\n                        })\n                    }\n                })\n                return newArray\n                // return this.$store.state.menus.menusName\n            },\n            local () {\n                return this.$store.state.app.local\n            },\n            hasReadErrorPage () {\n                return this.$store.state.app.hasReadErrorPage\n            },\n            unreadCount () {\n                return this.$store.state.user.unreadCount\n            }\n        },\n        methods: {\n            ...mapMutations([\n                'setBreadCrumb',\n                'setTagNavList',\n                'addTag',\n                'setLocal',\n                'setHomeRoute',\n                'closeTag'\n            ]),\n            ...mapActions([\n                'handleLogin',\n                'getUnreadMessageCount'\n            ]),\n            turnToPage (route, all) {\n                let { path, name, params, query } = {}\n                if (typeof route === 'string' && !all) path = route\n                else if (typeof route === 'string' && all) name = route\n                else {\n                    path = route.path\n                    name = route.name\n                    params = route.params\n                    query = route.query\n                }\n                this.$router.push({\n                    path,\n                    name,\n                    params,\n                    query\n                })\n            },\n            handleCollapsedChange (state) {\n              this.collapsed = state;\n              setCookies('collapsed',state);\n            },\n            handleCloseTag (res, type, route) {\n                if (type !== 'others') {\n                    if (type === 'all') {\n                        this.turnToPage(this.$config.homeName, 'all')\n                    } else {\n                        if (routeEqual(this.$route, route)) {\n                            this.closeTag(route)\n                        }\n                    }\n                }\n                this.setTagNavList(res)\n            },\n            handleClick (item) {\n                this.turnToPage(item)\n            },\n            getLogo () {\n                let logo = this.$store.state.userInfo.logo\n                let logoSmall = this.$store.state.userInfo.logoSmall\n                this.maxLogo = logo || this.maxLogo\n                this.minLogo = logoSmall || this.minLogo\n                getLogo().then( res =>{\n                  this.minLogo = res.data.logo_square;\n                  this.maxLogo = res.data.logo;\n                })\n            },\n            handleReload () {\n                this.reload = false\n                if (Setting.showProgressBar) iView.LoadingBar.start()\n                this.$nextTick(() => {\n                    this.reload = true\n                    if (Setting.showProgressBar) iView.LoadingBar.finish()\n                })\n            },\n            clear () {\n              this.openImage = false;\n            },\n        },\n        watch: {\n            '$route' (newRoute) {\n                let openNames = getMenuopen(newRoute, this.menuList)\n                this.$store.commit('menus/setopenMenus', openNames)\n                const { name, query, params, meta } = newRoute\n                this.addTag({\n                    route: { name, query, params, meta },\n                    type: 'push'\n                })\n                this.setBreadCrumb(newRoute)\n                this.setTagNavList(getNewTagList(this.tagNavList, newRoute))\n                this.$refs.sideMenu.updateOpenName(newRoute.path)\n            }\n        },\n        mounted () {\n            this.screenWidth = document.body.clientWidth\n            window.onresize = () => {\n                return (() => {\n                    this.screenWidth = document.body.clientWidth\n                    if (this.screenWidth <= 1060) {\n                        this.collapsed = true\n                        setCookies('collapsed',true);\n                    } else {\n                        this.collapsed = false\n                        setCookies('collapsed',false);\n                    }\n                })()\n            }\n\n            /**\n             * @description 初始化设置面包屑导航和标签导航\n             */\n            this.setTagNavList()\n            this.setHomeRoute(routers)\n            const { name, params, query, meta } = this.$route\n            this.addTag({\n                route: { name, params, query, meta }\n            })\n            this.setBreadCrumb(this.$route)\n            // 设置初始语言\n            this.setLocal(this.$i18n.locale)\n            // 如果当前打开页面不在标签栏中，跳到homeName页\n            if (!this.tagNavList.find(item => item.name === this.$route.name)) {\n                this.$router.push({\n                    name: this.$config.homeName\n                })\n            }\n            // 获取未读消息条数\n            this.getUnreadMessageCount()\n            this.getLogo()\n        }\n    }\n</script>\n<style lang=\"less\">\n  .main .header-con{\n    padding: 0 20px 0 0px;\n  }\n  .main .logo-con img{\n    height: 50px;\n  }\n  .main .tag-nav-wrapper{\n    background:unset;\n  }\n  .open-image{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    background-color: rgba(0,0,0,0.6);\n    height: 100%;\n    width: 100%;\n    top: 0;\n    left: 0;\n    z-index: 1000;\n  }\n</style>\n"]}]}